{"version":3,"file":"umd.js","sources":["../src/if-const.ts","../src/const-if.ts"],"sourcesContent":["export type Falsy = null | undefined | false | 0 | '';\r\n\r\nexport type F<T, R, U = Falsy> = (res: Exclude<T, U>) => R;\r\nexport type ELF<T, R, U = Falsy> = (res: Extract<T, U>) => R;\r\n\r\ntype FP<T, R> = [f?: F<T, R>, elf?: ELF<T, R>];\r\n\r\ntype FT<T, R> = (...args: FP<T, R>) => R | undefined;\r\n\r\ntype IfConst<U = Falsy> = {\r\n  /**\r\n   * Remembers the value to check later with a comparator\r\n   *\r\n   * @param value - the value to lazily check later\r\n   * @returns a function that accepts two checking branches\r\n   */\r\n  <T>(value: T): {\r\n    /**\r\n     * Checks if the value is truthy for current comparator.\r\n     * If it is, then the callback is executed.\r\n     *\r\n     * If a callback returns a value,\r\n     * it will be passed on as the return value of the whole function.\r\n     *\r\n     * The function will return `undefined` otherwise.\r\n     *\r\n     * @param f - a callback to execute if comparator yields true\r\n     * @returns value returned from f, or `undefined`\r\n     */\r\n    <R>(f: F<T, R, U>): R | undefined\r\n    /**\r\n     * Checks if the value is truthy for current comporator.\r\n     * One of the two callbacks is executed based on the result.\r\n     *\r\n     * If a callback returns a value,\r\n     * it will be passed on as the return value of the whole function.\r\n     *\r\n     * @param f - a callback to execute if comparator yields true\r\n     * @param elf - a callback to execute if comparator yields false\r\n     * @returns value returned from f or elf\r\n     */\r\n    <R>(f: F<T, R, U>, elf: ELF<T, R, U>): R;\r\n  }\r\n  /**\r\n   * Checks if the value is truthy for current comparator.\r\n   * If it is, then the callback is executed.\r\n   *\r\n   * If a callback returns a value,\r\n   * it will be passed on as the return value of the whole function.\r\n   *\r\n   * The function will return `undefined` otherwise.\r\n   *\r\n   * @param value - the value to check against the comparator\r\n   * @param f - a callback to execute if comparator yields true\r\n   * @returns value returned from f, or `undefined`\r\n   */\r\n  <T, R>(value: T, f: F<T, R, U>): R | undefined;\r\n  /**\r\n   * Checks if the value is truthy for current comporator.\r\n   * One of the two callbacks is executed based on the result.\r\n   *\r\n   * If a callback returns a value,\r\n   * it will be passed on as the return value of the whole function.\r\n   *\r\n   * @param value - the value to check against the comparator\r\n   * @param f - a callback to execute if comparator yields true\r\n   * @param elf - a callback to execute if comparator yields false\r\n   * @returns value returned from f or elf\r\n   */\r\n  <T, R>(value: T, f: F<T, R, U>, elf: ELF<T, R, U>): R;\r\n  <T, R>(value: T, f?: F<T, R, U>, elf?: ELF<T, R, U>): R | undefined;\r\n}\r\n\r\nexport type Comparator = (val: any) => boolean;\r\n\r\nexport type CompThis = { check: Comparator };\r\n\r\nexport const defaultComp: Comparator = (val: any) => !!val;\r\n\r\nfunction _ifConst<T, R>(this: CompThis, cond: T, ...args: FP<T, R>): FT<T, R> | R | undefined {\r\n  return args[0]\r\n    ? (this.check(cond) ? args[0] : args[1])?.(cond as any)\r\n    : _ifConst.bind(this, cond as unknown) as FT<T, R>;\r\n}\r\n\r\nexport const ifConst: IfConst & {\r\n  /**\r\n   * Changes the default comparator\r\n   * to one that checks if the input is not equal (`!==`)\r\n   * to the passed value.\r\n   *\r\n   * Serves as a way to type-safely inject a new comparator into the `ifConst` function.\r\n   *\r\n   * @param value - the value to negatively check against\r\n   * @returns IfConst - with the new comparator in-place\r\n   */\r\n  not<U>(value: U): IfConst<U>;\r\n\r\n  /**\r\n   * Changes the default comparator\r\n   * to one that checks if the passed function yields true\r\n   * for the current input.\r\n   *\r\n   * Serves as a way to type-safely inject a new comparator into the `ifConst` function.\r\n   *\r\n   * @param comparator - the function to use as a new comparator\r\n   * @returns IfConst - with the new comparator in-place\r\n   */\r\n  compare<U>(comparator: Comparator): IfConst<U>;\r\n} = _ifConst.bind({ check: defaultComp }) as any;\r\n\r\nifConst.compare = <U>(c: Comparator): IfConst<U> => _ifConst.bind({ check: c }) as any;\r\nifConst.not = <U>(value: U): IfConst<U> => _ifConst.bind({ check: _ => _ !== value }) as any;\r\n","import { CompThis, Comparator, defaultComp, F, ELF, Falsy, ifConst } from './if-const';\r\n\r\nfunction _constIf<T, R>(this: CompThis, f: F<T, R>, elf?: ELF<T, R>) {\r\n  return (value: T) => ifConst.compare(this.check)(value, f as any, elf as any) as R | undefined;\r\n}\r\n\r\ntype ConstIf<U> = {\r\n  <T, R>(f: F<T, R, U>): (value: T) => R | undefined;\r\n  <T, R>(f: F<T, R, U>, elf: ELF<T, R, U>): (value: T) => R;\r\n  <T, R>(f: F<T, R, U>, elf?: ELF<T, R, U>): (value: T) => R | undefined;\r\n};\r\n\r\nexport const constIf: ConstIf<Falsy> & {\r\n  /**\r\n   * Changes the default comparator\r\n   * to one that checks if the input is not equal (`!==`)\r\n   * to the passed value.\r\n   *\r\n   * Serves as a way to type-safely inject a new comparator into the `constIf` function.\r\n   *\r\n   * @param value - the value to negatively check against\r\n   * @returns constIf - with the new comparator in-place\r\n   */\r\n  not<U>(value: U): ConstIf<U>;\r\n\r\n  /**\r\n   * Changes the default comparator\r\n   * to one that checks if the passed function yields true\r\n   * for the current input.\r\n   *\r\n   * Serves as a way to type-safely inject a new comparator into the `constIf` function.\r\n   *\r\n   * @param comparator - the function to use as a new comparator\r\n   * @returns constIf - with the new comparator in-place\r\n   */\r\n  compare<U>(comparator: Comparator): ConstIf<U>;\r\n} = _constIf.bind({ check: defaultComp }) as any;\r\n\r\nconstIf.compare = <U>(c: Comparator): ConstIf<U> => _constIf.bind({ check: c }) as any;\r\nconstIf.not = <U>(value: U): ConstIf<U> => _constIf.bind({ check: _ => _ !== value }) as any;\r\n"],"names":["defaultComp","val","_ifConst","cond","this","check","_ref","bind","ifConst","_constIf","f","elf","value","compare","_this","c","not","_","constIf"],"mappings":"mPA6EO,IAAMA,EAA0B,SAACC,WAAeA,GAEvD,SAASC,EAA+BC,mEAEjCC,KAAKC,MAAMF,uGAAZG,EAAyCH,GACzCD,EAASK,KAAKH,KAAMD,OAGbK,EAwBTN,EAASK,KAAK,CAAEF,MAAOL,IC3G3B,SAASS,EAA+BC,EAAYC,qBAC3C,SAACC,UAAaJ,EAAQK,QAAQC,EAAKT,MAArBG,CAA4BI,EAAOF,EAAUC,ID4GpEH,EAAQK,QAAU,SAAIE,UAA8Bb,EAASK,KAAK,CAAEF,MAAOU,KAC3EP,EAAQQ,IAAM,SAAIJ,UAAyBV,EAASK,KAAK,CAAEF,MAAO,SAAAY,UAAKA,IAAML,UCpGhEM,EAwBTT,EAASF,KAAK,CAAEF,MAAOL,IAE3BkB,EAAQL,QAAU,SAAIE,UAA8BN,EAASF,KAAK,CAAEF,MAAOU,KAC3EG,EAAQF,IAAM,SAAIJ,UAAyBH,EAASF,KAAK,CAAEF,MAAO,SAAAY,UAAKA,IAAML"}