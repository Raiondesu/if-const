{"version":3,"file":"umd.js","sources":["../src/index.ts"],"sourcesContent":["export type Falsy = null | undefined | false | 0 | '';\r\n\r\ntype F<T, R> = (res: Exclude<T, Falsy>) => R;\r\ntype ELF<T, R> = (res: Extract<T, Falsy>) => R;\r\n\r\nexport type FP<T, R> = [f?: F<T, R>, elf?: ELF<T, R>];\r\n\r\ntype FT<T, R> = (...args: FP<T, R>) => T | R;\r\n\r\nexport function ifConst<T>(cond: T): {\r\n  <R>(f: F<T, R>): R | undefined\r\n  <R>(f: F<T, R>, elf: ELF<T, R>): R;\r\n}\r\nexport function ifConst<T, R>(cond: T, f: F<T, R>): R | undefined;\r\nexport function ifConst<T, R>(cond: T, f: F<T, R>, elf: ELF<T, R>): R;\r\nexport function ifConst<T, R>(cond: T, f?: F<T, R>, elf?: ELF<T, R>): R | undefined;\r\nexport function ifConst<T, R = never>(cond: T, ...args: FP<T, R>): T | R | undefined | FT<T, R> {\r\n  return args[0]\r\n    ? (cond ? args[0] : args[1])?.(cond as any)\r\n    : (f, elf) => ifConst<T, R>(cond, f as any, elf as any);\r\n}\r\n\r\nexport default ifConst;\r\n"],"names":["ifConst","cond","_ref","f","elf"],"mappings":"4PAgBgBA,EAAsBC,mEAE/BA,sGAADC,EAA6BD,GAC7B,SAACE,EAAGC,UAAQJ,EAAcC,EAAME,EAAUC"}